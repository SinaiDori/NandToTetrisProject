// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    Not(in=zx, out=NotZX);
    And16(a=x, b[0]=NotZX, b[1]=NotZX, b[2]=NotZX, b[3]=NotZX, b[4]=NotZX, b[5]=NotZX, b[6]=NotZX, b[7]=NotZX, b[8]=NotZX, b[9]=NotZX, b[10]=NotZX, b[11]=NotZX, b[12]=NotZX, b[13]=NotZX, b[14]=NotZX, b[15]=NotZX, out=newX1);
    Not16(in=newX1, out=NotNewX1);
    Mux16(a=newX1, b=NotNewX1, sel=nx, out=newX2);
    Not(in=zy, out=NotZY);
    And16(a=y, b[0]=NotZY, b[1]=NotZY, b[2]=NotZY, b[3]=NotZY, b[4]=NotZY, b[5]=NotZY, b[6]=NotZY, b[7]=NotZY, b[8]=NotZY, b[9]=NotZY, b[10]=NotZY, b[11]=NotZY, b[12]=NotZY, b[13]=NotZY, b[14]=NotZY, b[15]=NotZY, out=newY1);
    Not16(in=newY1, out=NotnewY1);
    Mux16(a=newY1, b=NotnewY1, sel=ny, out=newY2);
    Add16(a=newX2, b=newY2, out=outf1);
    And16(a=newX2, b=newY2, out=outf0);
    Mux16(a=outf0, b=outf1, sel=f, out=outf);
    Not16(in=outf, out=NotOutf);
    Mux16(a=outf, b=NotOutf, sel=no, out=out, out[0..7]=beng, out[8..15]=al, out[15]=MSB);
    Or8Way(in=beng, out=outFirst8);
    Or8Way(in=al, out=outLast8);
    Or(a=outFirst8, b=outLast8, out=outZR);
    Not(in=outZR, out=zr);
    And(a=MSB, b=MSB, out=ng);
}